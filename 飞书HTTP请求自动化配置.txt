=== 飞书HTTP请求自动化配置指南 ===

🎯 适用场景：
使用飞书自动化的"发送HTTP请求"功能，直接调用GitHub API

📋 配置步骤：

第一步：创建GitHub Personal Access Token
1. 访问：https://github.com/settings/tokens
2. 点击"Generate new token (classic)"
3. Token名称：Feishu-Integration-Token
4. 权限选择：
   ✅ repo (完整仓库访问权限)
   ✅ workflow (工作流访问权限)
5. 复制生成的token（格式：ghp_xxxxxxxxxxxxxxxxxxxx）
   ⚠️ 重要：Token只显示一次，请立即复制保存！

第二步：在飞书多维表格中配置自动化
1. 打开您的飞书多维表格
2. 点击右上角"自动化"
3. 创建新自动化：
   - 触发器：当记录被创建时（或被修改时）
   - 动作：发送HTTP请求

第三步：HTTP请求配置

**请求方法**：POST

**请求URL**：
https://api.github.com/repos/AlimanIrawan/indonesia-map-feishu-integration/dispatches

**请求头（Headers）**：
```
Authorization: token ghp_your_real_token_here
Content-Type: application/json
Accept: application/vnd.github.v3+json
User-Agent: Feishu-Automation
```

**请求体（Body）**：
选择"JSON格式"，填入以下内容：

```json
{
  "event_type": "feishu-data-update",
  "client_payload": {
    "shop_code": "{{记录.shop_code}}",
    "latitude": "{{记录.latitude}}",
    "longitude": "{{记录.longitude}}",
    "outlet_name": "{{记录.outlet_name}}",
    "brand": "{{记录.brand}}",
    "kecamatan": "{{记录.kecamatan}}",
    "potensi": "{{记录.potensi}}"
  }
}
```

第四步：字段映射说明
根据您的实际字段名称，修改上面JSON中的字段映射：

常见字段名映射：
- shop_code → 可能是：outlet_code、店铺代码、门店编号
- latitude → 可能是：纬度、lat
- longitude → 可能是：经度、lng、lon
- outlet_name → 可能是：nama_pemilik、店铺名称、门店名称
- brand → 可能是：品牌、brand_name
- kecamatan → 可能是：区域、district、地区
- potensi → 可能是：潜力、potential、类型

⚠️ 重要注意事项：

1. **Token替换**：将请求头中的 `ghp_your_real_token_here` 替换为第一步获取的真实GitHub Token

2. **仓库名称**：确认使用正确的仓库名称 `indonesia-map-feishu-integration`

3. **字段名称**：确保JSON中的字段名与您表格中的实际字段名一致

4. **必填字段**：shop_code、latitude、longitude 是必填的，其他字段可选

5. **数据格式**：确保纬度经度是数字格式，不要包含文字

📝 示例配置：

假设您的表格字段名为：
- 门店编号 → shop_code
- 纬度 → latitude  
- 经度 → longitude
- 店主姓名 → outlet_name
- 品牌 → brand
- 区域 → kecamatan
- 潜力等级 → potensi

则JSON配置为：
```json
{
  "event_type": "feishu-data-update",
  "client_payload": {
    "shop_code": "{{记录.门店编号}}",
    "latitude": "{{记录.纬度}}",
    "longitude": "{{记录.经度}}",
    "outlet_name": "{{记录.店主姓名}}",
    "brand": "{{记录.品牌}}",
    "kecamatan": "{{记录.区域}}",
    "potensi": "{{记录.潜力等级}}"
  }
}
```

🧪 测试方法：

1. **保存自动化规则**
2. **在表格中添加一条测试记录**
3. **检查自动化执行日志**
4. **访问GitHub Actions查看是否触发**：
   https://github.com/AlimanIrawan/indonesia-map-feishu-integration/actions
5. **确认CSV文件是否更新**

✅ 成功标志：
- 飞书自动化显示"执行成功"
- GitHub Actions显示新的工作流运行
- public/markers.csv文件有新数据
- Netlify应用显示更新后的地图

❌ 常见错误：

1. **401 Unauthorized（Bad credentials）**：
   - GitHub Token错误、过期或权限不足
   - 重新生成Token并确保复制完整
   - 确保Token有repo权限

2. **400 Bad Request**：
   - JSON格式错误
   - 字段名不匹配
   - 数据类型不正确

3. **404 Not Found**：
   - 仓库路径错误（检查是否为indonesia-map-feishu-integration）
   - Token没有仓库访问权限

4. **飞书显示成功但GitHub无变化**：
   - 通常是401认证失败导致
   - 检查Token是否正确配置

🔧 立即修复步骤：

如果遇到401错误：
1. 重新访问：https://github.com/settings/tokens
2. 删除旧的Token
3. 创建新的Token，确保选择repo权限
4. 复制完整的Token（包括ghp_前缀）
5. 在飞书自动化中更新Authorization头部
6. 确认请求URL使用正确仓库名：indonesia-map-feishu-integration

🔄 完整流程验证：

1. 添加测试数据 → 
2. 飞书自动化触发 → 
3. GitHub Actions执行 → 
4. CSV文件更新 → 
5. Netlify重新部署 → 
6. 地图显示新数据

完成以上配置后，您的飞书表格数据将自动同步到地图应用！ 