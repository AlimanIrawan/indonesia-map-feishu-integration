=== 飞书最终配置说明 ===

🎯 **现在所有服务器端都已准备就绪**：
- ✅ Render服务正在运行
- ✅ 环境变量GITHUB_TOKEN已设置
- ✅ GitHub Token有效并有正确权限

🔧 **飞书自动化配置**：

**第1步：打开飞书自动化**
在飞书中找到之前创建的自动化流程

**第2步：编辑HTTP请求节点**
找到"发送HTTP请求"的节点，修改以下设置：

```
请求方法：POST
请求URL：https://indonesia-map-feishu-integration.onrender.com/feishu-to-github
```

**第3步：设置请求头**
只保留以下请求头：
```
Content-Type: application/json
```
⚠️ **重要**：删除所有其他请求头（特别是Authorization）

**第4步：设置请求体**
使用JSON格式，根据你的飞书表格前4个必填字段：
```json
{
  "event_type": "feishu_update",
  "client_payload": {
    "shop_code": "{{shop_code}}",
    "latitude": "{{latitude}}",
    "longitude": "{{longitude}}",
    "outlet_name": "{{outlet name}}"
  }
}
```
⚠️ **字段映射说明**：
- 飞书表格中的字段名：`outlet name`（有空格）
- JSON中的字段名：`outlet_name`（下划线）
- GitHub Actions会自动处理这个映射，最终保存到CSV的 `outlet name` 列

**第5步：响应处理**
- 不需要设置特殊的响应处理
- 中转服务器会返回JSON格式的响应

**第6步：保存并测试**
1. 保存自动化配置
2. 手动触发一次测试
3. 检查是否收到成功响应

🎉 **预期结果**：
- 飞书自动化不再报错
- GitHub Actions会被正确触发
- 地图数据会自动更新

📝 **配置要点总结**：
- URL：https://indonesia-map-feishu-integration.onrender.com/feishu-to-github
- 方法：POST
- 请求头：只要Content-Type: application/json
- 请求体：JSON格式的地点数据
- 无需设置GitHub Token（服务器端处理）

✅ **Render配置已更新完成！**

🔧 **已完成的更改**：
- ✅ 更新了 render.yaml 配置文件
- ✅ 修改服务名为: feishu-github-proxy  
- ✅ 设置启动命令: node feishu-proxy-server.js
- ✅ 添加健康检查路径: /health
- ✅ 准备好自动部署脚本

🚀 **下一步操作**：

**第一步：部署到Render**
1. 双击运行 `更新Render部署.sh`
2. 等待Git推送完成
3. Render会自动检测更改并重新部署

**第二步：确认部署状态**
1. 访问 https://dashboard.render.com
2. 找到你的服务（现在叫 feishu-github-proxy）
3. 查看部署日志，确认状态为 "Live"

**第三步：测试新服务器**
部署完成后，你会获得新的URL，格式如：
```
https://feishu-github-proxy-xxx.onrender.com
```

测试链接：
- 健康检查: https://你的域名.onrender.com/health
- 服务信息: https://你的域名.onrender.com/

**第四步：更新飞书配置**

🔄 **修改飞书自动化**：
1. **URL改为**：
   ```
   https://indonesia-map-feishu-integration.onrender.com/feishu-to-github
   ```

2. **请求头设置**：
   - 删除 `Authorization: token ghp_xxx`
   - 只保留 `Content-Type: application/json`

3. **请求体保持不变**：
   ```json
   {
     "event_type": "feishu_update",
     "client_payload": {
       "shop_code": "{{shop_code}}",
       "latitude": "{{latitude}}",
       "longitude": "{{longitude}}",
       "outlet_name": "{{outlet name}}"
     }
   }
   ```

📊 **预期响应**：
飞书现在会收到标准的JSON响应：
```json
{
  "success": true,
  "message": "GitHub Actions触发成功",
  "status": 204,
  "timestamp": "2025-06-17T10:14:34.158Z",
  "data": {...}
}
```

⚠️ **注意事项**：
1. 第一次访问可能需要10-30秒唤醒（冷启动）
2. 15分钟无请求会自动休眠，但飞书触发会立即唤醒
3. 所有请求都会在Render控制台显示日志

🎯 **问题解决**：
- ✅ 解决了GitHub API返回204空响应的问题
- ✅ 飞书现在能正常解析响应格式
- ✅ 保持GitHub Token安全（在服务器端）
- ✅ 提供详细的请求日志

准备好运行部署脚本了吗？ 