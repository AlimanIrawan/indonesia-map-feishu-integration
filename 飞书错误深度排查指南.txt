=== 飞书错误深度排查指南 ===

🔍 **当前状况确认**：
✅ GitHub Token有效 (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)
✅ GitHub API调用成功 (HTTP 204响应)
✅ Token权限正确 (repo, workflow, admin:repo_hook)
❌ 飞书自动化仍然报错："HTTP请求出参返回格式不正确"

🚨 **问题分析**：
由于GitHub API直接调用成功，问题很可能在飞书自动化的配置细节上。

=== 第一步：检查飞书响应处理配置 ===

**问题**：飞书可能期望特定的响应格式，但GitHub API返回空响应（204 No Content）

**解决方案**：
1. 在飞书自动化的"发送HTTP请求"配置中
2. 找到"高级设置"或"响应处理"选项
3. 设置：
   - 成功状态码：`204` 或 `2xx`
   - 响应格式：选择"不解析响应内容"或"任意格式"
   - 或者勾选"忽略响应内容"

=== 第二步：尝试最简化配置 ===

**请求方法**：POST

**请求URL**：
```
https://api.github.com/repos/AlimanIrawan/indonesia-map-feishu-integration/dispatches
```

**请求头（最简化）**：
```
Authorization: token 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
```
⚠️ 注意：先不要添加Content-Type，测试是否成功

**请求体（最简化测试）**：
```json
{"event_type": "test"}
```

=== 第三步：逐步添加配置 ===

**如果第二步成功，再添加Content-Type**：
```
Authorization: token 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
Content-Type: application/json
```

**然后使用完整请求体**：
```json
{
  "event_type": "feishu-data-update", 
  "client_payload": {
    "shop_code": "{{第1步满足条件... At Outlet Code}}",
    "latitude": "{{第1步满足条件... 5, latitude}}",
    "longitude": "{{第1步满足条件... 5, longitude}}",
    "outlet_name": "{{第1步满足条件... At Nama Pemilik}}"
  }
}
```

=== 第四步：检查字段映射 ===

**常见问题**：
1. 字段名不匹配
2. 字段值为空
3. 字段格式错误

**调试方法**：
1. 先用固定值测试：
```json
{
  "event_type": "feishu-data-update", 
  "client_payload": {
    "shop_code": "TEST001",
    "latitude": "-6.2",
    "longitude": "106.8",
    "outlet_name": "测试店铺"
  }
}
```

2. 如果固定值成功，再逐个替换为动态字段

=== 第五步：检查飞书自动化版本 ===

**可能的问题**：
- 旧版本飞书自动化可能有兼容性问题
- HTTP请求功能可能有限制

**解决方案**：
1. 检查飞书是否有更新
2. 尝试重新创建自动化流程
3. 或者使用飞书的"自定义脚本"功能

=== 第六步：使用飞书自定义脚本替代方案 ===

如果HTTP请求一直有问题，可以使用自定义脚本：

```javascript
async function main(event) {
    try {
        const record = event.record;
        
        const response = await fetch('https://api.github.com/repos/AlimanIrawan/indonesia-map-feishu-integration/dispatches', {
            method: 'POST',
            headers: {
                'Authorization': 'token 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',
                'Content-Type': 'application/json'
            },
            body: JSON.stringify({
                event_type: 'feishu-data-update',
                client_payload: {
                    shop_code: record.fields['Outlet Code'] || '',
                    latitude: record.fields['latitude'] || '',
                    longitude: record.fields['longitude'] || '',
                    outlet_name: record.fields['Nama Pemilik'] || ''
                }
            })
        });
        
        if (response.status === 204) {
            console.log('✅ GitHub Actions触发成功');
        } else {
            console.error('❌ 请求失败:', response.status);
        }
        
    } catch (error) {
        console.error('❌ 脚本错误:', error);
    }
}
```

=== 第七步：检查具体错误信息 ===

**获取详细错误**：
1. 在飞书自动化执行记录中点击"详情"
2. 查看完整的错误响应
3. 截图错误详情，进一步分析

**常见错误类型**：
1. `401 Unauthorized` - Token问题
2. `400 Bad Request` - 请求格式问题
3. `404 Not Found` - URL错误
4. `422 Unprocessable Entity` - 数据验证失败

=== 立即行动建议 ===

**优先级1**：检查飞书的响应处理设置
**优先级2**：使用最简化配置测试
**优先级3**：查看飞书的详细错误信息
**优先级4**：考虑使用自定义脚本替代

你可以先尝试第一步和第二步，看看是否能解决问题。如果还是不行，请把飞书的详细错误信息截图给我看。 